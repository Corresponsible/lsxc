// Generated by LiveScript 1.5.0
(function(){
  var fs, through, reactify, browserifyInc, livescript, browserify, xtend, sassc, watch, fixIndents, basedir, sassCache, path, sassC, save, setupWatch, compileFile, compile;
  fs = require('fs');
  through = require('through');
  reactify = require('reactify-ls');
  browserifyInc = require('browserify-incremental');
  livescript = require('livescript');
  browserify = require('browserify');
  xtend = require('xtend');
  sassc = require('node-sass');
  watch = require('node-watch');
  fixIndents = require('fix-indents');
  basedir = process.cwd();
  sassCache = (path = './file.sass.cache', {
    save: function(obj){
      return fs.writeFileSync(path, JSON.stringify(obj));
    },
    load: function(){
      if (!fs.existsSync(path)) {
        return {};
      }
      return JSON.parse(fs.readFileSync(path).toString('utf8'));
    }
  });
  sassC = sassCache.load();
  save = function(file, content){
    console.log("save " + file);
    return fs.writeFileSync(file, content);
  };
  setupWatch = function(commander){
    var watcher;
    return watcher = watch(basedir, {
      recursive: true,
      filter: function(name){
        return !/(node_modules|\.git)/.test(name) && /\.ls/.test(name);
      }
    }, function(){
      watcher.close();
      return compile(commander);
    });
  };
  compileFile = function(input, data){
    var code, js, target;
    console.log("compile " + input);
    code = reactify(data);
    js = livescript.compile(code.ls);
    target = input.replace(/\.ls/, '.js');
    save(target, js);
    return code;
  };
  compile = function(commander){
    var file, filename, bundle, bundleJs, bundleCss, html, bundleHtml, sass, compilesass, ref$, makeBundle, print;
    console.log("----------------------");
    file = commander.compile;
    filename = file.replace(/\.ls/, '');
    if (file == null) {
      return console.error('File is required');
    }
    bundle = commander.bundle === true
      ? 'bundle'
      : commander.bundle;
    bundleJs = filename + "-" + bundle + ".js";
    bundleCss = filename + "-" + bundle + ".css";
    html = commander.html === true
      ? 'index'
      : commander.html;
    bundleHtml = filename + "-" + html + ".html";
    sass = commander.sass === true
      ? 'style'
      : commander.sass;
    compilesass = commander.compilesass === true
      ? 'style'
      : commander.compilesass;
    sassC[commander.compile] = (ref$ = sassC[commander.compile]) != null
      ? ref$
      : {};
    makeBundle = function(file, callback){
      var options, b, bundle, string;
      options = {
        basedir: basedir,
        paths: [basedir + "/node_modules"],
        debug: false,
        commondir: false,
        entries: [file]
      };
      b = browserify(xtend(browserifyInc.args, options));
      b.transform(function(file){
        var data, write, end;
        data = '';
        write = function(buf){
          return data += buf;
        };
        end = function(){
          var code, indented, sassConf, err;
          code = compileFile(file, data);
          if (sass != null) {
            save(filename + ".sass", code.sass);
          }
          if (commander.fixindents) {
            indented = fixIndents(data);
            save(file, indented);
          }
          if (compilesass != null) {
            console.log("compile " + filename + ".sass");
            sassConf = {
              data: code.sass,
              indentedSyntax: true
            };
            try {
              sassC[commander.compile][file] = sassc.renderSync(sassConf).css.toString('utf8');
            } catch (e$) {
              err = e$;
              console.error("compile SASS error: " + err.message);
            }
          }
          this.queue(livescript.compile(code.ls));
          return this.queue(null);
        };
        return through(write, end);
      });
      browserifyInc(b, {
        cacheFile: file + '.cache'
      });
      bundle = b.bundle();
      string = "";
      bundle.on('data', function(data){
        return string += data.toString();
      });
      bundle.on('error', function(error){
        return console.error(error.message);
      });
      return bundle.on('end', function(_){
        var compiledSass, result;
        compiledSass = sassC[commander.compile];
        result = {
          css: Object.keys(compiledSass).map(function(it){
            return compiledSass[it];
          }).join('\n'),
          js: string
        };
        sassCache.save(sassC);
        callback(null, result);
      });
    };
    if (commander.bundle != null) {
      makeBundle(file, function(err, bundlec){
        save(bundleJs, bundlec.js);
        if (compilesass != null) {
          save(bundleCss, bundlec.css);
        }
      });
    }
    if (commander.html != null) {
      print = "<!DOCTYPE html>\n<html lang=\"en-us\">\n  <head>\n   <meta charset=\"utf-8\">\n   <title>Hello...</title>\n   <link rel=\"stylesheet\" type=\"text/css\" href=\"./" + bundleCss + "\">\n  </head>\n  <script type=\"text/javascript\" src=\"./" + bundleJs + "\"></script>\n</html>";
      save(bundleHtml, print);
    }
    if (commander.watch) {
      return setupWatch(commander);
    }
  };
  module.exports = compile;
}).call(this);
