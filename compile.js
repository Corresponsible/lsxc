// Generated by LiveScript 1.5.0
(function(){
  var fs, through, reactify, browserifyInc, livescript, browserify, xtend, sassc, watch, basedir, save, setupWatch, compileFile, compile;
  fs = require('fs');
  through = require('through');
  reactify = require('reactify-ls');
  browserifyInc = require('browserify-incremental');
  livescript = require('livescript');
  browserify = require('browserify');
  xtend = require('xtend');
  sassc = require('node-sass');
  watch = require('node-watch');
  basedir = process.cwd();
  save = function(file, content){
    console.log("Save " + file);
    return fs.writeFileSync(file, content);
  };
  setupWatch = function(commander){
    var watcher;
    return watcher = watch(basedir, {
      recursive: true,
      filter: function(name){
        return !/(node_modules|\.git)/.test(name) && /\.ls/.test(name);
      }
    }, function(){
      watcher.close();
      return compile(commander);
    });
  };
  compileFile = function(input, data){
    var code, js, target;
    console.log("Compile " + input);
    code = reactify(data);
    js = livescript.compile(code.ls);
    target = input.replace(/\.ls/, '.js');
    save(target, js);
    return code;
  };
  compile = function(commander){
    var file, bundle, html, sass, compilesass, makeBundle, print;
    console.log("----------------------");
    file = commander.compile;
    if (file == null) {
      return console.error('File is required');
    }
    bundle = commander.bundle === true
      ? 'bundle'
      : commander.bundle;
    html = commander.html === true
      ? 'index'
      : commander.html;
    sass = commander.sass === true
      ? 'style'
      : commander.sass;
    compilesass = commander.compilesass === true
      ? 'style'
      : commander.compilesass;
    makeBundle = function(file, callback){
      var styles, options, b, bundle, string;
      styles = [];
      options = {
        basedir: basedir,
        paths: [basedir + "/node_modules"],
        debug: false,
        commondir: false,
        entries: [file]
      };
      b = browserify(xtend(browserifyInc.args, options));
      b.transform(function(file){
        var data, write, end;
        data = '';
        write = function(buf){
          return data += buf;
        };
        end = function(){
          var code;
          code = compileFile(file, data);
          styles.push(code.sass);
          this.queue(code.ls);
          return this.queue(null);
        };
        return through(write, end);
      });
      browserifyInc(b, {
        cacheFile: file + ".cache"
      });
      bundle = b.bundle();
      string = "";
      bundle.on('data', function(data){
        return string += data.toString();
      });
      bundle.on('error', function(error){});
      return bundle.on('end', function(_){
        var result;
        result = {
          sass: styles.join('\n'),
          bundle: string
        };
        callback(null, result);
      });
    };
    if (commander.bundle != null) {
      makeBundle(file, function(err, bundlec){
        var state, ref$;
        if (err != null) {
          return console.error(err);
        }
        save(bundle + ".js", bundlec.bundle);
        if (sass != null) {
          save(sass + ".sass", bundlec.sass);
          if (compilesass != null) {
            console.log("Compile SASS");
            state = {
              css: ""
            };
            try {
              state.css = sassc.renderSync({
                data: bundlec.sass,
                indentedSyntax: true
              });
              save(compilesass + ".css", state.css.css);
            } catch (e$) {
              err = e$;
              console.error("Compile SASS Error " + ((ref$ = err.message) != null ? ref$ : err));
            }
          }
        }
      });
    }
    if (commander.html != null) {
      print = '<!DOCTYPE html>\n<html lang="en-us">\n  <head>\n   <meta charset="utf-8">\n   <title>Hello...</title>\n   <link rel="stylesheet" type="text/css" href="./style.css">\n  </head>\n  <script type="text/javascript" src="./bundle.js"></script>\n</html>';
      save(html + ".html", print);
    }
    if (commander.watch) {
      return setupWatch(commander);
    }
  };
  module.exports = compile;
}).call(this);
